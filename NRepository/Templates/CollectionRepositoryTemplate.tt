<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Text" #>
<#@ parameter name="Params" type="NRepository.Params.CollectionRepositoryTemplateParams" #>
using System.Linq;

namespace NRepository.Samples.Collections.Repositories
{
	public class <#=Params.Name#> : <#=Params.Interface#>
	{
		public <#=Params.Name#>(NRepository.Core.CollectionRepositorySource<<#=Params.FullNameModel#>> repositorySource)
		{
			RepositorySource = repositorySource;
		}

		public NRepository.Core.CollectionRepositorySource<<#=Params.FullNameModel#>> RepositorySource { get; private set; }

		<# if(Params.Contract.IsSelect) { #>
		public <#=Params.FullNameModel#> Select(<#=Params.KeyType#> key)
		{
			return Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == key);
		}

		public <#=Params.FullNameModel#>[] Select()
		{
			return Enumerable.ToArray(RepositorySource.Collection);
		}
		<# } #>

		<# if(Params.Contract.IsSelectAsync) { #>
		public async System.Threading.Tasks.Task<<#=Params.FullNameModel#>> SelectAsync(<#=Params.KeyType#> key)
		{
			return Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == key);
		}

		public async System.Threading.Tasks.Task<<#=Params.FullNameModel#>[]> SelectAsync()
		{
			return Enumerable.ToArray(RepositorySource.Collection);
		}
		<# } #>

		<# if(Params.Contract.IsDelete) { #>
		public void Delete(<#=Params.KeyType#> key)
		{
			var item = Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == key);

			if(item == null)
				throw new System.ArgumentException("Cant delete model with key " + key + ". Not found");

			RepositorySource.Collection.Remove(item);
		}

		public void Delete(<#=Params.FullNameModel#> model)
		{
			Delete(model.<#=Params.KeyName#>);
		}
		<# } #>

		<# if(Params.Contract.IsDeleteAsync) { #>
		public async System.Threading.Tasks.Task DeleteAsync(<#=Params.KeyType#> key)
		{
			var item = Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == key);

			if(item == null)
				throw new System.ArgumentException("Cant delete model with key " + key + ". Not found");

			RepositorySource.Collection.Remove(item);
		}

		public async System.Threading.Tasks.Task DeleteAsync(<#=Params.FullNameModel#> model)
		{
			await DeleteAsync(model.<#=Params.KeyName#>);
		}
		<# } #>

		<# if(Params.Contract.IsCreate) { #>
		public <#=Params.KeyType#> Create(<#=Params.FullNameModel#> model)
		{
			var item = Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == model.<#=Params.KeyName#>);

			if(item != null)
				throw new System.ArgumentException("Cant create model with key " + item.<#=Params.KeyName#> + ". Already exist");

			RepositorySource.Collection.Add(model);

			return model.<#=Params.KeyName#>;
		}
		<# } #>

		<# if(Params.Contract.IsCreateAsync) { #>
		public async System.Threading.Tasks.Task<<#=Params.KeyType#>> CreateAsync(<#=Params.FullNameModel#> model)
		{
			var item = Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == model.<#=Params.KeyName#>);

			if(item != null)
				throw new System.ArgumentException("Cant create model with key " + item.<#=Params.KeyName#> + ". Already exist");

			RepositorySource.Collection.Add(model);

			return model.<#=Params.KeyName#>;
		}
		<# } #>

		<# if(Params.Contract.IsUpdate) { #>
		public <#=Params.KeyType#> Update(<#=Params.FullNameModel#> model)
		{
			var item = Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == model.<#=Params.KeyName#>);

			if(item == null)
				throw new System.ArgumentException("Cant update model with key " + model.<#=Params.KeyName#> + ". Not found");

			RepositorySource.Collection.Remove(model);

			RepositorySource.Collection.Add(model);

			return model.<#=Params.KeyName#>;
		}
		<# } #>

		<# if(Params.Contract.IsUpdateAsync) { #>
		public async System.Threading.Tasks.Task<<#=Params.KeyType#>> UpdateAsync(<#=Params.FullNameModel#> model)
		{
			var item = Enumerable.FirstOrDefault(RepositorySource.Collection, t => t.<#=Params.KeyName#> == model.<#=Params.KeyName#>);

			if(item == null)
				throw new System.ArgumentException("Cant update model with key " + model.<#=Params.KeyName#> + ". Not found");

			RepositorySource.Collection.Remove(model);

			RepositorySource.Collection.Add(model);

			return model.<#=Params.KeyName#>;
		}
		<# } #>
	}
}